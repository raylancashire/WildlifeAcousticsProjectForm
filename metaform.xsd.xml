<?xml version="1.0" encoding="utf-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
        xmlns:wa="https://www.wildlifeacoustics.com/SCHEMA/MetaForms/1.0"
	targetNamespace="https://www.wildlifeacoustics.com/SCHEMA/MetaForms/1.0"
	elementFormDefault="qualified"
>

<!--
    MetaForms 
    Wildlife Acoustics, Inc.
    https://www.wildlifeacoustics.com/

    MetaForms provide schema information for underlying GUANO metadata 
    (https://guano-md.org) tag/value pairs to define groups of fields
    (and sub-fields), type information, constraints, and context suitable
    for building human-readable forms and/or interfacing with database
    tables.

    GUANO is an open and extensible metadata format for acoustic recording
    files. Vendors and users can add new tags using vendor-specific 
    namespaces for universal uniqueness.  The values are encoded as UTF-8 
    strings and may represent typed data (such as timestamps, coordinates,
    floating point numbers, integers, etc).  However, GUANO offers no mechanism
    to determine the types (e.g. how to interpret the strings for different
    keys), the context of the metadata (e.g. created by the recorder for
    each recording, common to a recorder's settings, generated by analysis
    software, or manually entered by a human interface), constraints 
    necessary for validation in user interfaces, and human-readable 
    documentation.

    This XML Schema defines the structure of a MetaForms XML document.
    A MetaForms document can define one or more named Forms, where each form 
    contains a set of fields corresponding to underlying GUANO metadata.
    A Form represents either a user interface to collect, edit and/or display
    metadata, or a mapping between underlying GUANO metadata and database
    tables e.g. suitable for CSV and/or SQL.

    Each form can have a human-readable title and description. Within a Form, 
    fields can be optionally divided into logical Groups, each with their own 
    heading and optional description.  These features facilitate the layout of 
    a human-readable form.  Additionally, a group of fields can also be 
    aggregated when interfacing to a database, for example, to combine fields 
    into a single JSON column using the heading as a the column name.  

    Each field represents either an underlying metadata value, or possibly a
    subfield (e.g. the hour componenet of a datetime specification or a
    specific object in a JSON encoded string).

    The following types and subtypes are defined:

      text    - UTF-8 encoded strings
      integer - signed integer values e.g. {[+-]}[0-9]+
      float   - floating point values e.g. {+|-}[0-9]*{.[0-9]*}{[Ee]{+|-}[0-9]+}
      vector  - a set of two or more floats separated by LWS or other 
                non-alphanumeric characters.  For example, GPS coordinates.

                Subtypes: reference an individual float or integer component
		          with an integer index such as 0, 1, or 2, etc.

      date     - YYYY-MM-DD
                 Subtypes: year    - integer year component
			   month   - integer month component
			   day     - integer day component
			   year-12 - integer year component 12 hours earlier
			   month-12- integer month component 12 hours earlier
			   day-12  - integer day component 12 hours earlier
      time     - hh:mm{:ss{.[0-9]+}
                 Subtypes: hour    - integer hour component
		           minute  - integer minute component
			   second  - float second component
			   hour-12 - integer hour component 12 hours earlier
      datetime - [date]T[time]{Z|((+|-)hh[[:]mm])}

                 Subtypes:  date    - date component
		            time    - time component
			    date-12 - date component from 12 hours earlier
			    time-12 - time component from 12 hours earlier
			    year    - integer year component
			    month   - integer month component
			    day     - integer day component
			    hour    - integer hour component
			    minute  - integer minute component
			    second  - float second component
			    year-12 - integer year component 12 hours earlier
			    month-12- integer month component 12 hours earlier
			    day-12  - integer day component 12 hours earlier
			    hour-12 - integer hour component 12 hours earlier

      json     - A properly formatted JSON object or array.

                 Subtypes: reference array objects with [index] e.g. [0]
		           reference objects by name with {name}, and
			   this can be nested e.g. [0]{name1}{name2}. 

    Each Field in a Form specifies the form's field type or subtype (default 
    is 'text') and must indicate the underlying metadata Tag value and, 
    if appropriate, a SubTag to indicate a subfield of a complex
    underlying type.

    Fields can have the following attributes:
    	type     - the type of the  field or subfield (text by default)

	required - boolean: the value is required for the form to be submitted
	           (ignored for readonly fields or non-human forms)
		   default is false.

	inherit  - boolean: the value provided in a form only applies if no
	           previous value was found in the data.  Otherwise, the value
		   is inherited from the data rather than the form.
		   Default is false which causes the form value to overwrite
		   any previous value.

	readonly - boolean: the value is read-only and can be displayed but 
	           not changed.  Default is false.

	hidden   - boolean: the field is defined but hidden in human readable 
   	           forms.  Default is false.  Note that a hidden field cannot
		   be required.

        internal - boolean: the field is defined for internal use by the 
	           software (not presently used but reserved for future use)

    Fields can have a default value as specified by the Default tag.  For
    the datetime and related subtypes, the special value "now" or "today" is 
    shorthand for the current date and/or time.

    Fields can have a list of allowed choices with Select/Option tags.  The
    value attribute of the option tag returns the field value while the 
    content of the Option tag is the display string.  If the value attribute
    is not specified, the Option content is returned and must be of the 
    appropriate type.  If a field is not required, an empty choice would be
    provided as one of the options.

    Fields with numeric (float or integer) values can be constrained to minimum
    and/or maximum bounds with Min and Max tags.  These tags are ignored for
    non-numeric types or fields constrained with Select/Option tags.  Numeric
    fields may also be scaled with Scale for unit conversion.  The Scale
    is multiplied with the underlying (Tag/GUANO) value to convert to the 
    field output value.

    Fields can have an optional human readable long description to describe the
    field as well as a short indication of units for numeric fields.

    Implementations may define different forms for different purposes.  For
    example, Kaleidoscope Software can load a MetaForms XML document to define 
    a project form, several output .CSV file formats, and interfaces to 
    several SQL database tables.

    See https://www.wildlifeacoustics.com/SCHEMA for exmamples used in 
    Kaleidoscope.
-->

<annotation>
  <documentation xml:lang="en">
    MetaForms
    Wildlife Acoustics, Inc.
    https://www.wildlifeacoustics.com/

    MetaForms provide schema information for underlying GUANO metadata 
    (https://guano-md.org) tag/value pairs to define groups of fields
    (and sub-fields), type information, constraints, and context suitable
    for building human-readable forms and/or interfacing with database
    tables.

    GUANO is an open and extensible metadata format for acoustic recording
    files. Vendors and users can add new tags using vendor-specific 
    namespaces for universal uniqueness.  The values are encoded as UTF-8 
    strings and may represent typed data (such as timestamps, coordinates,
    floating point numbers, integers, etc).  However, GUANO offers no mechanism
    to determine the types (e.g. how to interpret the strings for different
    keys), the context of the metadata (e.g. created by the recorder for
    each recording, common to a recorder's settings, generated by analysis
    software, or manually entered by a human interface), constraints 
    necessary for validation in user interfaces, and human-readable 
    documentation.

    This XML Schema defines the structure of a MetaForms XML document.
    A MetaForms document can define one or more named Forms, where each form 
    contains a set of fields corresponding to underlying GUANO metadata.
    A Form represents either a user interface to collect, edit and/or display
    metadata, or a mapping between underlying GUANO metadata and database
    tables e.g. suitable for CSV and/or SQL.

    Each form can have a human-readable title and description. Within a Form, 
    fields can be optionally divided into logical Groups, each with their own 
    heading and optional description.  These features facilitate the layout of 
    a human-readable form.  Additionally, a group of fields can also be 
    aggregated when interfacing to a database, for example, to combine fields 
    into a single JSON column using the heading as a the column name.  

    Each field represents either an underlying metadata value, or possibly a
    subfield (e.g. the hour componenet of a datetime specification or a
    specific object in a JSON encoded string).

    The following types and subtypes are defined:

      text    - UTF-8 encoded strings
      integer - signed integer values e.g. {[+-]}[0-9]+
      float   - floating point values e.g. {+|-}[0-9]*{.[0-9]*}{[Ee]{+|-}[0-9]+}
      vector  - a set of two or more floats separated by LWS or other 
                non-alphanumeric characters.  For example, GPS coordinates.

                Subtypes: reference an individual float or integer component
		          with an integer index such as 0, 1, or 2, etc.

      date     - YYYY-MM-DD
                 Subtypes: year    - integer year component
			   month   - integer month component
			   day     - integer day component
			   year-12 - integer year component 12 hours earlier
			   month-12- integer month component 12 hours earlier
			   day-12  - integer day component 12 hours earlier
      time     - hh:mm{:ss{.[0-9]+}
                 Subtypes: hour    - integer hour component
		           minute  - integer minute component
			   second  - float second component
			   hour-12 - integer hour component 12 hours earlier
      datetime - [date]T[time]{Z|((+|-)hh[[:]mm])}

                 Subtypes:  date    - date component
		            time    - time component
			    date-12 - date component from 12 hours earlier
			    time-12 - time component from 12 hours earlier
			    year    - integer year component
			    month   - integer month component
			    day     - integer day component
			    hour    - integer hour component
			    minute  - integer minute component
			    second  - float second component
			    year-12 - integer year component 12 hours earlier
			    month-12- integer month component 12 hours earlier
			    day-12  - integer day component 12 hours earlier
			    hour-12 - integer hour component 12 hours earlier

      json     - A properly formatted JSON object or array.

                 Subtypes: reference array objects with [index] e.g. [0]
		           reference objects by name with {name}, and
			   this can be nested e.g. [0]{name1}{name2}. 

    Each Field in a Form specifies the form's field type or subtype (default 
    is 'text') and must indicate the underlying metadata Tag value and, 
    if appropriate, a SubTag to indicate a subfield of a complex
    underlying type.

    Fields can have the following attributes:
    	type     - the type of the  field or subfield (text by default)

	required - boolean: the value is required for the form to be submitted
	           (ignored for readonly fields or non-human forms)
		   default is false.

	inherit  - boolean: the value provided in a form only applies if no
	           previous value was found in the data.  Otherwise, the value
		   is inherited from the data rather than the form.
		   Default is false which causes the form value to overwrite
		   any previous value.

	readonly - boolean: the value is read-only and can be displayed but 
	           not changed.  Default is false.

	hidden   - boolean: the field is defined but hidden in human readable 
   	           forms.  Default is false.  Note that a hidden field cannot
		   be required.

        internal - boolean: the field is defined for internal use by the 
	           software (not presently used but reserved for future use)

    Fields can have a default value as specified by the Default tag.  For
    the datetime and related subtypes, the special value "now" or "today" is 
    shorthand for the current date and/or time.

    Fields can have a list of allowed choices with Select/Option tags.  The
    value attribute of the option tag returns the field value while the 
    content of the Option tag is the display string.  If the value attribute
    is not specified, the Option content is returned and must be of the 
    appropriate type.  If a field is not required, an empty choice would be
    provided as one of the options.

    Fields with numeric (float or integer) values can be constrained to minimum
    and/or maximum bounds with Min and Max tags.  These tags are ignored for
    non-numeric types or fields constrained with Select/Option tags.  Numeric
    fields may also be scaled with Scale for unit conversion.  The Scale
    is multiplied with the underlying (Tag/GUANO) value to convert to the 
    field output value.

    Fields can have an optional human readable long description to describe the
    field as well as a short indication of units for numeric fields.

    Implementations may define different forms for different purposes.  For
    example, Kaleidoscope Software can load a MetaForms XML document to define 
    a project form, several output .CSV file formats, and interfaces to 
    several SQL database tables.

    See https://www.wildlifeacoustics.com/SCHEMA for exmamples used in 
    Kaleidoscope.
  </documentation>
</annotation>

<element name="MetaForms" type="wa:MetaFormsType"/>

<complexType name="MetaFormsType">
  <sequence>
    <element name="Form" type="wa:FormType" maxOccurs="unbounded"/>
  </sequence>
  <attribute name="name" type="string"/>
  <attribute name="version" type="string"/>
</complexType>

<complexType name="FormType">
  <sequence>
    <element name="Title" type="string" minOccurs="0"/>
    <element name="Description" type="string" minOccurs="0"/>
    <choice maxOccurs="unbounded">
      <element name="Group" type="wa:GroupType"/>
      <element name="Field" type="wa:FieldType"/>
    </choice>
  </sequence>
  <attribute name="name" type="string" use="required"/>
  <attribute name="version" type="string"/>
</complexType>

<complexType name="GroupType">
  <sequence>
    <element name="Heading" type="string"/>
    <element name="Description" type="string" minOccurs="0"/>
    <element name="Field" type="wa:FieldType" maxOccurs="unbounded"/>
  </sequence>
</complexType>

<complexType name="FieldType">
  <all>
    <element name="Key" type="string"/>
    <element name="SubKey" type="string" minOccurs="0"/>
    <element name="Label" type="string" minOccurs="0"/>
    <element name="Description" type="string" minOccurs="0"/>
    <element name="Default" type="string" minOccurs="0"/>
    <element name="Select" type="wa:SelectType" minOccurs="0"/>
    <element name="Min" type="float" minOccurs="0"/> 
    <element name="Max" type="float" minOccurs="0"/> 
    <element name="Scale" type="float" minOccurs="0"/>
    <element name="Units" type="string" minOccurs="0"/>
  </all>

  <attribute name="type" type="wa:FieldValueType" default="text"/>
  <attribute name="readonly" type="boolean" default="false"/>
  <attribute name="inherit" type="boolean" default="false"/>
  <attribute name="hidden" type="boolean" default="false"/>
  <attribute name="required" type="boolean" default="false"/>
  <attribute name="internal" type="boolean" default="false"/>
</complexType>

<complexType name="SelectType">
  <sequence>
    <element name="Option" type="wa:OptionType" maxOccurs="unbounded"/>
  </sequence>
</complexType>

<complexType name="OptionType">
  <simpleContent>
    <extension base="string">
      <attribute name="value" type="string"/>
    </extension>
  </simpleContent>
</complexType>

<simpleType name="FieldValueType">
  <restriction base="string">
    <enumeration value="text"/>
    <enumeration value="integer"/>
    <enumeration value="float"/>
    <enumeration value="vector"/>
    <enumeration value="date"/>
    <enumeration value="time"/>
    <enumeration value="datetime"/>
    <enumeration value="json"/>
  </restriction>
</simpleType>

</schema>
